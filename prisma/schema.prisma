// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id             String           @id @default(cuid())
  email          String           @unique
  password       String
  name           String?
  recommendations Recommendation[]
  reviews        Review[]
  createdAt      DateTime         @default(now())
  updatedAt      DateTime         @updatedAt
  sessions Session[]
  verificationToken VerificationToken[]

  @@map("users")
}

model Session {
  id           String   @id @default(cuid())
  userId       String?   @map("user_id")
  user         User?     @relation(fields: [userId], references: [id])
  expires      DateTime
  createdAt    DateTime @default(now()) @map("created_at")
  updatedAt    DateTime @updatedAt @map("updated_at")

  @@map("sessions")
}

model VerificationToken {
  id         String   @id @default(cuid())
  token      String
  expires    DateTime
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  userId     String
  user       User     @relation(fields: [userId], references: [id])

  @@map("verification_tokens")
}

model Recommendation {
  id              String    @id @default(cuid())
  title           String
  service         String
  description     String
  category        String
  numberOfSeasons Int
  episodesPerSeason Int[]
  rating          Float
  numberOfRatings Int       @default(0)
  user            User      @relation(fields: [userId], references: [id])
  userId          String
  reviews         Review[]
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt

  @@index([category])
  @@index([service])
  @@index([rating])
}

model Review {
  id        String   @id @default(cuid())
  rating    Float     @default(0.0)
  comment   String
  user      User     @relation(fields: [userId], references: [id])
  userId    String
  recommendation Recommendation @relation(fields: [recommendationId], references: [id])
  recommendationId String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
